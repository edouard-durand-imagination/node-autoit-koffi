export type Point = {
    x: number;
    y: number;
};
export type Rect = {
    left: number;
    top: number;
    right: number;
    bottom: number;
};
export declare const init: () => Promise<void>;
export declare const error: () => Promise<number>;
export declare const autoItSetOption: (szOption: string, nValue: number) => Promise<number>;
export declare const clipGet: (nBufSize?: number) => Promise<string>;
export declare const clipPut: (szClip: string) => Promise<void>;
export declare const controlClick: (szTitle: string, szText: string | undefined, szControl: string, szButton?: string, nNumClicks?: number, nX?: number, nY?: number) => Promise<number>;
export declare const controlClickByHandle: (hWnd: number, hCtrl: number, szButton?: string, nNumClicks?: number, nX?: number, nY?: number) => Promise<number>;
export declare const controlCommand: (szTitle: string, szText: string | undefined, szControl: string, szCommand: string, szExtra?: string, nBufSize?: number) => Promise<string>;
export declare const controlCommandByHandle: (hWnd: number, hCtrl: number, szCommand: string, szExtra?: string, nBufSize?: number) => Promise<string>;
export declare const controlListView: (szTitle: string, szText: string | undefined, szControl: string, szCommand: string, szExtra1?: string, szExtra2?: string, nBufSize?: number) => Promise<string>;
export declare const controlListViewByHandle: (hWnd: number, hCtrl: number, szCommand: string, szExtra1?: string, szExtra2?: string, nBufSize?: number) => Promise<string>;
export declare const controlDisable: (szTitle: string, szText: string | undefined, szControl: string) => Promise<number>;
export declare const controlDisableByHandle: (hWnd: number, hCtrl: number) => Promise<number>;
export declare const controlEnable: (szTitle: string, szText: string | undefined, szControl: string) => Promise<number>;
export declare const controlEnableByHandle: (hWnd: number, hCtrl: number) => Promise<number>;
export declare const controlFocus: (szTitle: string, szText: string | undefined, szControl: string) => Promise<number>;
export declare const controlFocusByHandle: (hWnd: number, hCtrl: number) => Promise<number>;
export declare const controlGetFocus: (szTitle: string, szText?: string, nBufSize?: number) => Promise<string>;
export declare const controlGetFocusByHandle: (hWnd: number, nBufSize?: number) => Promise<string>;
export declare const controlGetHandle: (hWnd: number, szControl: string) => Promise<number>;
export declare const controlGetHandleAsText: (szTitle: string, szText: string | undefined, szControl: string, nBufSize?: number) => Promise<string>;
export declare const controlGetPos: (szTitle: string, szText: string | undefined, szControl: string) => Promise<Rect>;
export declare const controlGetPosByHandle: (hWnd: number, hCtrl: number) => Promise<Rect>;
export declare const controlGetText: (szTitle: string, szText: string | undefined, szControl: string, nBufSize?: number) => Promise<string>;
export declare const controlGetTextByHandle: (hWnd: number, hCtrl: number, nBufSize?: number) => Promise<string>;
export declare const controlHide: (szTitle: string, szText: string | undefined, szControl: string) => Promise<number>;
export declare const controlHideByHandle: (hWnd: number, hCtrl: number) => Promise<number>;
export declare const controlMove: (szTitle: string, szText: string | undefined, szControl: string, nX: number, nY: number, nWidth?: number, nHeight?: number) => Promise<number>;
export declare const controlMoveByHandle: (hWnd: number, hCtrl: number, nX: number, nY: number, nWidth?: number, nHeight?: number) => Promise<number>;
export declare const controlSend: (szTitle: string, szText: string | undefined, szControl: string, szSendText: string, nMode?: number) => Promise<number>;
export declare const controlSendByHandle: (hWnd: number, hCtrl: number, szSendText: string, nMode?: number) => Promise<number>;
export declare const controlSetText: (szTitle: string, szText: string | undefined, szControl: string, szControlText: string) => Promise<number>;
export declare const controlSetTextByHandle: (hWnd: number, hCtrl: number, szControlText: string) => Promise<number>;
export declare const controlShow: (szTitle: string, szText: string | undefined, szControl: string) => Promise<number>;
export declare const controlShowByHandle: (hWnd: number, hCtrl: number) => Promise<number>;
export declare const controlTreeView: (szTitle: string, szText: string | undefined, szControl: string, szCommand: string, szExtra1?: string, szExtra2?: string, nBufSize?: number) => Promise<string>;
export declare const controlTreeViewByHandle: (hWnd: number, hCtrl: number, szCommand: string, szExtra1?: string, szExtra2?: string, nBufSize?: number) => Promise<string>;
export declare const driveMapAdd: (szDevice: string, szShare: string, nFlags: number, szUser?: string, szPwd?: string, nBufSize?: number) => Promise<string>;
export declare const driveMapDel: (szDevice: string) => Promise<number>;
export declare const driveMapGet: (szDevice: string, nBufSize?: number) => Promise<string>;
export declare const isAdmin: () => Promise<number>;
export declare const mouseClick: (szButton?: string, nX?: number, nY?: number, nClicks?: number, nSpeed?: number) => Promise<number>;
export declare const mouseClickDrag: (szButton: string, nX1: number, nY1: number, nX2: number, nY2: number, nSpeed?: number) => Promise<number>;
export declare const mouseDown: (szButton?: string) => Promise<void>;
export declare const mouseGetCursor: () => Promise<number>;
export declare const mouseGetPos: () => Promise<Point>;
export declare const mouseMove: (nX: number, nY: number, nSpeed?: number) => Promise<number>;
export declare const mouseUp: (szButton?: string) => Promise<void>;
export declare const mouseWheel: (szDirection: string, nClicks: number) => Promise<void>;
export declare const opt: (szOption: string, nValue: number) => Promise<number>;
export declare const pixelChecksum: (lpRect: Rect, nStep?: number) => Promise<number>;
export declare const pixelGetColor: (nX: number, nY: number) => Promise<number>;
export declare const pixelSearch: (lpRect: Rect, nCol: number, nVar?: number, nStep?: number) => Promise<Point>;
export declare const processClose: (szProcess: string) => Promise<number>;
export declare const processExists: (szProcess: string) => Promise<number>;
export declare const processSetPriority: (szProcess: string, nPriority: number) => Promise<number>;
export declare const processWait: (szProcess: string, nTimeout?: number) => Promise<number>;
export declare const processWaitClose: (szProcess: string, nTimeout?: number) => Promise<number>;
export declare const run: (szProgram: string, szDir?: string, nShowFlag?: number) => Promise<number>;
export declare const runWait: (szProgram: string, szDir?: string, nShowFlag?: number) => Promise<number>;
export declare const runAs: (szUser: string, szDomain: string, szPassword: string, nLogonFlag: number, szProgram: string, szDir?: string, nShowFlag?: number) => Promise<number>;
export declare const runAsWait: (szUser: string, szDomain: string, szPassword: string, nLogonFlag: number, szProgram: string, szDir?: string, nShowFlag?: number) => Promise<number>;
export declare const send: (szSendText: string, nMode?: number) => Promise<void>;
export declare const shutdown: (nFlags: number) => Promise<number>;
export declare const sleep: (nMilliseconds: number) => Promise<void>;
export declare const statusbarGetText: (szTitle: string, szText?: string, nPart?: number, nBufSize?: number) => Promise<string>;
export declare const statusbarGetTextByHandle: (hWnd: number, nPart?: number, nBufSize?: number) => Promise<string>;
export declare const toolTip: (szTip: string, nX?: number, nY?: number) => Promise<void>;
export declare const winActivate: (szTitle: string, szText?: string) => Promise<number>;
export declare const winActivateByHandle: (hWnd: number) => Promise<number>;
export declare const winActive: (szTitle: string, szText: string) => Promise<number>;
export declare const winActiveByHandle: (hWnd: number) => Promise<number>;
export declare const winClose: (szTitle: string, szText?: string) => Promise<number>;
export declare const winCloseByHandle: (hWnd: number) => Promise<number>;
export declare const winExists: (szTitle: string, szText?: string) => Promise<number>;
export declare const winExistsByHandle: (hWnd: number) => Promise<number>;
export declare const winGetCaretPos: () => Promise<Point>;
export declare const winGetClassList: (szTitle: string, szText?: string, nBufSize?: number) => Promise<string>;
export declare const winGetClassListByHandle: (hWnd: number, nBufSize?: number) => Promise<string>;
export declare const winGetClientSize: (szTitle: string, szText?: string) => Promise<Rect>;
export declare const winGetClientSizeByHandle: (hWnd: number) => Promise<Rect>;
export declare const winGetHandle: (szTitle: string, szText?: string) => Promise<number>;
export declare const winGetHandleAsText: (szTitle: string, szText?: string, nBufSize?: number) => Promise<string>;
export declare const winGetPos: (szTitle: string, szText?: string) => Promise<Rect>;
export declare const winGetPosByHandle: (hWnd: number) => Promise<Rect>;
export declare const winGetProcess: (szTitle: string, szText?: string) => Promise<number>;
export declare const winGetProcessByHandle: (hWnd: number) => Promise<number>;
export declare const winGetState: (szTitle: string, szText?: string) => Promise<number>;
export declare const winGetStateByHandle: (hWnd: number) => Promise<number>;
export declare const winGetText: (szTitle: string, szText?: string, nBufSize?: number) => Promise<string>;
export declare const winGetTextByHandle: (hWnd: number, nBufSize?: number) => Promise<string>;
export declare const winGetTitle: (szTitle: string, szText?: string, nBufSize?: number) => Promise<string>;
export declare const winGetTitleByHandle: (hWnd: number, nBufSize?: number) => Promise<string>;
export declare const winKill: (szTitle: string, szText?: string) => Promise<number>;
export declare const winKillByHandle: (hWnd: number) => Promise<number>;
export declare const winMenuSelectItem: (szTitle: string, szText: string | undefined, szItem1: string, szItem2?: string, szItem3?: string, szItem4?: string, szItem5?: string, szItem6?: string, szItem7?: string, szItem8?: string) => Promise<number>;
export declare const winMenuSelectItemByHandle: (hWnd: number, szItem1: string, szItem2?: string, szItem3?: string, szItem4?: string, szItem5?: string, szItem6?: string, szItem7?: string, szItem8?: string) => Promise<number>;
export declare const winMinimizeAll: () => Promise<void>;
export declare const winMinimizeAllUndo: () => Promise<void>;
export declare const winMove: (szTitle: string, szText: string | undefined, nX: number, nY: number, nWidth?: number, nHeight?: number) => Promise<number>;
export declare const winMoveByHandle: (hWnd: number, nX: number, nY: number, nWidth?: number, nHeight?: number) => Promise<number>;
export declare const winSetOnTop: (szTitle: string, szText: string | undefined, nFlag: number) => Promise<number>;
export declare const winSetOnTopByHandle: (hWnd: number, nFlag: number) => Promise<number>;
export declare const winSetState: (szTitle: string, szText: string | undefined, nFlags: number) => Promise<number>;
export declare const winSetStateByHandle: (hWnd: number, nFlags: number) => Promise<number>;
export declare const winSetTitle: (szTitle: string, szText: string | undefined, szNewTitle: string) => Promise<number>;
export declare const winSetTitleByHandle: (hWnd: number, szNewTitle: string) => Promise<number>;
export declare const winSetTrans: (szTitle: string, szText: string | undefined, nTrans: number) => Promise<number>;
export declare const winSetTransByHandle: (hWnd: number, nTrans: number) => Promise<number>;
export declare const winWait: (szTitle: string, szText?: string, nTimeout?: number) => Promise<number>;
export declare const winWaitByHandle: (hWnd: number, nTimeout?: number) => Promise<number>;
export declare const winWaitActive: (szTitle: string, szText?: string, nTimeout?: number) => Promise<number>;
export declare const winWaitActiveByHandle: (hWnd: number, nTimeout?: number) => Promise<number>;
export declare const winWaitClose: (szTitle: string, szText?: string, nTimeout?: number) => Promise<number>;
export declare const winWaitCloseByHandle: (hWnd: number, nTimeout?: number) => Promise<number>;
export declare const winWaitNotActive: (szTitle: string, szText?: string, nTimeout?: number) => Promise<number>;
export declare const winWaitNotActiveByHandle: (hWnd: number, nTimeout?: number) => Promise<number>;
//# sourceMappingURL=index.d.ts.map